{
  "version": 3,
  "sources": ["src/app/harmonia-universalis/services/hu-database.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { RequestService } from '../../services/request.service';\nimport { map, tap } from 'rxjs/operators';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { SelectedLangService } from '../../selected-lang.service';\n\nexport interface HUEntry {\n  author: { id: string; label: string } | undefined;\n  title: { id: string; label: string } | undefined;\n  location: { id: string; label: string } | undefined;\n  country: { id: string; label: string } | undefined;\n  date: { value: string };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class HuDatabaseService {\n  private request = inject(RequestService);\n  private lang = inject(SelectedLangService);\n\n  private biblioData$ = new BehaviorSubject<HUEntry[]>(null);\n\n  myLang: string = \"%20.%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22\" + this.lang.selectedLang + \"%22%2C%22en%22.%20%7D%0A%7D%0A\";\n\n  sparqlBuilding(myLang: string): string {\n    let u = \"https://database.factgrid.de/query/#%23biblio%0ASELECT%20DISTINCT%20%3Ftitle%20%3FtitleLabel%20%3Fauthor%20%3FauthorLabel%20%3Fdate%20%3Flocation%20%3FlocationLabel%20%3F\" +\n      \"country%20%3FcountryLabel%0AWHERE%20%0A%7B%20VALUES%20%3Fc%20%7B%20wd%3AQ21925%20wd%3AQ11317%20%7D%0A%20%20%3Ftitle%20wdt%3AP2%20wd%3AQ20%3B%0A%20%20%20%20%20%20%20%20wdt%3AP243%20wd%3AQ172203%3B%0A%20%20%20%20%20%20%20%20wdt%3AP21%20%3F\" +\n      \"author%3B%0A%20%20%20%20%20%20%20%20wdt%3AP222%20%3Fdate%3B%0A%20%20%20%20%20%20%20%20wdt%3AP241%20%3Flocation%20.%0A%20%20%3Fcountry%20%5Ewdt%3AP297%20%3Flocation%3B%0A%20%20%20%20%20%20%20%20%20%20wdt%3AP2%20%20%20%3Fc%20%20\" + myLang;\n    return u;\n  }\n\n /* listFromSparql(res: any): any[] {\n    if (res !== undefined && res.results !== undefined) {\n      for (let i = 0; i < res.results.bindings.length; i++) {\n        res.results.bindings[i][\"author\"].id = res.results.bindings[i][\"author\"].value.replace(\n          \"https://database.factgrid.de/entity/\", \"\");\n        res.results.bindings[i][\"author\"].label = res.results.bindings[i][\"authorLabel\"].value;\n        res.results.bindings[i][\"title\"].id = res.results.bindings[i][\"title\"].value.replace(\n          \"https://database.factgrid.de/entity/\", \"\");\n        res.results.bindings[i][\"title\"].label = res.results.bindings[i][\"titleLabel\"].value;\n        res.results.bindings[i][\"location\"].id = res.results.bindings[i][\"location\"].value.replace(\n          \"https://database.factgrid.de/entity/\", \"\");\n        res.results.bindings[i][\"location\"].label = res.results.bindings[i][\"locationLabel\"].value;\n        res.results.bindings[i][\"country\"].id = res.results.bindings[i][\"country\"].value.replace(\n          \"https://database.factgrid.de/entity/\", \"\");\n        res.results.bindings[i][\"country\"].label = res.results.bindings[i][\"countryLabel\"].value;\n        res.results.bindings[i][\"date\"].value = res.results.bindings[i][\"date\"].value.slice(0, 4);\n      }\n      return res.results.bindings;\n    }\n    return [];\n  }\n  */\n\n  listFromSparql(res: any): HUEntry[] {\n    if (res?.results?.bindings) {\n      const simplified = res.results.bindings.map((binding) => ({\n        author: binding.author\n          ? {\n            id: binding.author.value.replace(\"https://database.factgrid.de/entity/\", \"\"),\n            label: binding.authorLabel?.value ?? \"\"\n          }\n          : undefined,\n        title: binding.title\n          ? {\n            id: binding.title.value.replace(\"https://database.factgrid.de/entity/\", \"\"),\n            label: binding.titleLabel?.value ?? \"\"\n          }\n          : undefined,\n        location: binding.location\n          ? {\n            id: binding.location.value.replace(\"https://database.factgrid.de/entity/\", \"\"),\n            label: binding.locationLabel?.value ?? \"\"\n          }\n          : undefined,\n        country: binding.country\n          ? {\n            id: binding.country.value.replace(\"https://database.factgrid.de/entity/\", \"\"),\n            label: binding.countryLabel?.value ?? \"\"\n          }\n          : undefined,\n        date: binding.date?.value\n          ? { value: binding.date.value.slice(0, 4) }\n          : { value: \"\" }\n      }));\n      // Optionnel : libérer la mémoire de la structure d'origine\n      res.results.bindings = [];\n      return simplified;\n    }\n    return [];\n  }\n\n\n\n  // Cette méthode retourne l'observable\n  databaseToDisplay(sparql: string): Observable<HUEntry[]> {\n    return this.request.getList(sparql).pipe(\n      map(res => this.listFromSparql(res)),\n    );\n  }\n\n  // Cette méthode gère le cache : elle souscrit et alimente le BehaviorSubject\n  loadBiblioData(sparql: string): void {\n    this.databaseToDisplay(sparql).subscribe({\n      next: data => this.biblioData$.next(data),\n      error: err => console.error('Erreur lors du chargement des données', err)\n    });\n  }\n\n  // Observable pour accéder à la donnée en cache\n  getBiblioData(): Observable<HUEntry[]> {\n    return this.biblioData$.asObservable();\n  }\n\n  newSparqlAdress(address: string): string {\n    const newPrefix = \"https://database.factgrid.de/sparql?query=\";\n    let oldPrefix = \"https://database.factgrid.de/query/#\";\n    if (address.includes('embed.html')) { oldPrefix = \"https://database.factgrid.de/query/embed.html#\"; }\n    if (address !== undefined) address = address.replace(oldPrefix, newPrefix);\n    return address;\n  }\n\n  databaseToDownload(data: any[]): any[][] {\n    let dataToDownload: any[][] = [[\"author\", \"author.id\", \"title\", \"title.id\", \"location\", \"location.id\", \"country\", \"country.id\", \"date\"]];\n    for (let i = 0; i < data.length; i++) {\n      dataToDownload[i + 1] = [\n        data[i].author.label, data[i].author.id,\n        data[i].title.label, data[i].title.id,\n        data[i].location.label, data[i].location.id,\n        data[i].country.label, data[i].country.id,\n        data[i].date.value\n      ];\n    }\n    return dataToDownload;\n  }\n\n  // hu-database.service.ts\n\n  initBiblioData(sparql: string): void {\n    if (!this.biblioData$.getValue() || this.biblioData$.getValue().length === 0) {\n      this.loadBiblioData(sparql);\n    }\n  }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;AAkBM,IAAO,oBAAP,MAAO,mBAAiB;EAJ9B,cAAA;AAKU,SAAA,UAAU,OAAO,cAAc;AAC/B,SAAA,OAAO,OAAO,mBAAmB;AAEjC,SAAA,cAAc,IAAI,gBAA2B,IAAI;AAEzD,SAAA,SAAiB,kGAAkG,KAAK,KAAK,eAAe;;EAE5I,eAAe,QAAc;AAC3B,QAAI,IAAI,8nBAEiO;AACzO,WAAO;EACT;;;;;;;;;;;;;;;;;;;;;;;EAyBA,eAAe,KAAQ;AACrB,QAAI,KAAK,SAAS,UAAU;AAC1B,YAAM,aAAa,IAAI,QAAQ,SAAS,IAAI,CAAC,aAAa;QACxD,QAAQ,QAAQ,SACZ;UACA,IAAI,QAAQ,OAAO,MAAM,QAAQ,wCAAwC,EAAE;UAC3E,OAAO,QAAQ,aAAa,SAAS;YAErC;QACJ,OAAO,QAAQ,QACX;UACA,IAAI,QAAQ,MAAM,MAAM,QAAQ,wCAAwC,EAAE;UAC1E,OAAO,QAAQ,YAAY,SAAS;YAEpC;QACJ,UAAU,QAAQ,WACd;UACA,IAAI,QAAQ,SAAS,MAAM,QAAQ,wCAAwC,EAAE;UAC7E,OAAO,QAAQ,eAAe,SAAS;YAEvC;QACJ,SAAS,QAAQ,UACb;UACA,IAAI,QAAQ,QAAQ,MAAM,QAAQ,wCAAwC,EAAE;UAC5E,OAAO,QAAQ,cAAc,SAAS;YAEtC;QACJ,MAAM,QAAQ,MAAM,QAChB,EAAE,OAAO,QAAQ,KAAK,MAAM,MAAM,GAAG,CAAC,EAAC,IACvC,EAAE,OAAO,GAAE;QACf;AAEF,UAAI,QAAQ,WAAW,CAAA;AACvB,aAAO;IACT;AACA,WAAO,CAAA;EACT;;EAKA,kBAAkB,QAAc;AAC9B,WAAO,KAAK,QAAQ,QAAQ,MAAM,EAAE,KAClC,IAAI,SAAO,KAAK,eAAe,GAAG,CAAC,CAAC;EAExC;;EAGA,eAAe,QAAc;AAC3B,SAAK,kBAAkB,MAAM,EAAE,UAAU;MACvC,MAAM,UAAQ,KAAK,YAAY,KAAK,IAAI;MACxC,OAAO,SAAO,QAAQ,MAAM,4CAAyC,GAAG;KACzE;EACH;;EAGA,gBAAa;AACX,WAAO,KAAK,YAAY,aAAY;EACtC;EAEA,gBAAgB,SAAe;AAC7B,UAAM,YAAY;AAClB,QAAI,YAAY;AAChB,QAAI,QAAQ,SAAS,YAAY,GAAG;AAAE,kBAAY;IAAkD;AACpG,QAAI,YAAY;AAAW,gBAAU,QAAQ,QAAQ,WAAW,SAAS;AACzE,WAAO;EACT;EAEA,mBAAmB,MAAW;AAC5B,QAAI,iBAA0B,CAAC,CAAC,UAAU,aAAa,SAAS,YAAY,YAAY,eAAe,WAAW,cAAc,MAAM,CAAC;AACvI,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,qBAAe,IAAI,CAAC,IAAI;QACtB,KAAK,CAAC,EAAE,OAAO;QAAO,KAAK,CAAC,EAAE,OAAO;QACrC,KAAK,CAAC,EAAE,MAAM;QAAO,KAAK,CAAC,EAAE,MAAM;QACnC,KAAK,CAAC,EAAE,SAAS;QAAO,KAAK,CAAC,EAAE,SAAS;QACzC,KAAK,CAAC,EAAE,QAAQ;QAAO,KAAK,CAAC,EAAE,QAAQ;QACvC,KAAK,CAAC,EAAE,KAAK;;IAEjB;AACA,WAAO;EACT;;EAIA,eAAe,QAAc;AAC3B,QAAI,CAAC,KAAK,YAAY,SAAQ,KAAM,KAAK,YAAY,SAAQ,EAAG,WAAW,GAAG;AAC5E,WAAK,eAAe,MAAM;IAC5B;EACF;;;uCA9HW,oBAAiB;IAAA;EAAA;;4EAAjB,oBAAiB,SAAjB,mBAAiB,WAAA,YAHhB,OAAM,CAAA;EAAA;;",
  "names": []
}
