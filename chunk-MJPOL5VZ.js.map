{
  "version": 3,
  "sources": ["src/app/prosopography/prosopo-database.service.ts"],
  "sourcesContent": ["// src/app/services/prosopo-database.service.ts\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { RequestService } from '../services/request.service';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { SelectedLangService } from '../selected-lang.service';\r\n\r\nexport interface Prosopo {\r\n  person: { id: string; label: string; descriptio: string } | undefined;\r\n  name: { id: string; label: string } | undefined;\r\n  society: { id: string; label: string } | undefined;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProsopoDatabaseService {\r\n\r\n private request = inject(RequestService);\r\n private lang = inject(SelectedLangService);\r\n\r\n  private prosopoData$ = new BehaviorSubject<any>(null);\r\n\r\n  myLang: string = \"%20.%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22\" + this.lang.selectedLang + \"%22%2C%22en%22.%20%7D%0A%7D%0A\";\r\n\r\n  //  this.request.getQidsList('haswbstatement:P131=Q99677+haswbstatement:P2=Q7');\r\n\r\n  sparqlBuilding(myLang: string): string {\r\n    let u = \"https://database.factgrid.de/query/#SELECT%20DISTINCT%20%3Fitem%20%3FitemLabel%20%3FitemDescription%20%20%3Fname%20%3FnameLabel%20%3Fsociety%20%3FsocietyLabel%20%20\" +\r\n      \"WHERE%20%7B%20%3Fitem%20wdt%3AP131%20wd%3AQ99677%3B%20wdt%3AP2%20wd%3AQ7%3B%20wdt%3AP247%20%3Fname%20%20%20OPTIONAL%20%7B%20%3Fitem%20wdt%3AP91%20%3Fsociety%20.%20%3Fsociety%20wdt%3AP2%20wd%3AQ164221%20%7D\" + myLang;\r\n     console.log(u);\r\n    return u;\r\n  }\r\n\r\n  listFromSparql(res: any): Prosopo[] {\r\n    if (res?.results?.bindings) {\r\n      const simplified = res.results.bindings.map(binding => ({\r\n        person: binding.item\r\n          ? {\r\n            id: binding.item.value.replace(\"https://database.factgrid.de/entity/\", \"\"),\r\n            label: binding.itemLabel?.value ?? \"\",\r\n            description: binding.itemDescription?.value ?? \"\"\r\n          }\r\n          : undefined,\r\n        name: binding.item\r\n          ? {\r\n            id: binding.name.value.replace(\"https://database.factgrid.de/entity/\", \"\"),\r\n            label: binding.nameLabel?.value ?? \"\"\r\n          }\r\n          : undefined,\r\n        society: binding.society\r\n          ? {\r\n            id: binding.society.value.replace(\"https://database.factgrid.de/entity/\", \"\"),\r\n            label: binding.societyLabel?.value ?? \"\"\r\n          }\r\n          : undefined\r\n      }));\r\n      res.results.bindings = [];\r\n      // Fusionne les doublons ici\r\n      return this.mergeDuplicatesByPersonId(simplified, '; ');\r\n    }\r\n    return [];\r\n  }\r\n\r\n\r\n  mergeDuplicatesByPersonId(list: Prosopo[], separator: string = '; '): Prosopo[] {\r\n    const map = new Map<string, Prosopo>();\r\n\r\n    for (const item of list) {\r\n      const id = item.person?.id;\r\n      if (!id) continue;\r\n\r\n      if (!map.has(id)) {\r\n        // Clone l'objet pour éviter de modifier l'original\r\n        map.set(id, {\r\n          ...item,\r\n          name: item.name ? { ...item.name } : undefined\r\n        });\r\n      } else {\r\n        const existing = map.get(id)!;\r\n        // Fusion des name.id\r\n        if (item.name?.id) {\r\n          if (existing.name?.id) {\r\n            existing.name.id += separator + item.name.id;\r\n          } else {\r\n            existing.name = { ...item.name };\r\n          }\r\n        }\r\n        // Fusion des name.label\r\n        if (item.name?.label) {\r\n          if (existing.name?.label) {\r\n            existing.name.label += separator + item.name.label;\r\n          } else {\r\n            if (!existing.name) existing.name = { id: '', label: '' };\r\n            existing.name.label = item.name.label;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return Array.from(map.values());\r\n  }\r\n\r\n\r\n  // Cette méthode retourne  l'observable\r\n  databaseToDisplay(sparql: string): Observable<any> {\r\n    return this.request.getList(sparql).pipe(\r\n      map(res => this.listFromSparql(res))\r\n    );\r\n  }\r\n\r\n  // Cette méthode gère le cache : elle souscrit et alimente le BehaviorSubject\r\n  loadProsopoData(sparql: string): void {\r\n    this.databaseToDisplay(sparql).subscribe({\r\n      next: data => {\r\n        this.prosopoData$.next(data);\r\n        console.log('Cache mis à jour prosopoData$', this.prosopoData$.getValue());\r\n      },\r\n      error: err => console.error('Erreur lors du chargement des données', err)\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  // Observable pour accéder à la donnée en cache\r\n  getProsopoData(): Observable<any> {\r\n    return this.prosopoData$.asObservable();\r\n  }\r\n\r\n  newSparqlAdress(address: string): string {\r\n    const newPrefix = \"https://database.factgrid.de/sparql?query=\";\r\n    let oldPrefix = \"https://database.factgrid.de/query/#\";\r\n    if (address.includes('embed.html')) { oldPrefix = \"https://database.factgrid.de/query/embed.html#\"; }\r\n    if (address !== undefined) address = address.replace(oldPrefix, newPrefix);\r\n    return address;\r\n  }\r\n\r\n  databaseToDownload(data: any[]): any[][] {\r\n    let dataToDownload: any[][] = [[\"person.label\", \"person.id\", \"person.description\", \"name.label\", \"name.id\", \"society.label\", \"society.id\"]];\r\n    for (let i = 0; i < data.length; i++) {\r\n      dataToDownload[i + 1] = [\r\n        data[i].person.label, data[i].person.id, data[i].person.description,\r\n        data[i].name.label, data[i].name.id,\r\n        data[i].society.label, data[i].society.id,\r\n      ];\r\n    }\r\n    return dataToDownload;\r\n  }\r\n\r\n  // proopo-database.service.ts\r\n\r\n  initProsopoData(sparql: string): void {\r\n    if (!this.prosopoData$.getValue() || this.prosopoData$.getValue().length === 0) {\r\n      this.loadProsopoData(sparql);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n"],
  "mappings": "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",
  "names": ["map"]
}
